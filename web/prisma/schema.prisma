generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String
  surname       String
  age           Int
  email         String
  password      String
  address       Address?  @relation(fields: [addressId], references: [id])
  addressId     String?
  phone         Phone?    @relation(fields: [phoneId], references: [id])
  phoneId       String?   @unique
  avatar        String
  birthDate     DateTime?
  doctor        Doctor?
  patient       Patient?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  @@unique([email, phoneId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id      String @id @default(uuid())
  city    String
  country String
  zipCode String @default("21000")
  Users   User[]
}

model Phone {
  id     String     @id @default(uuid())
  number String     @unique
  brand  PhoneBrand
  user   User?
}

enum PhoneBrand {
  TIGO
  CLARO
  MOVISTAR
  OTHER
}

model Doctor {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique
  specialities      String[]
  patients          Patient[]   @relation(references: [id])
  diagnosedDiseases Condition[] @relation("DiagnosedDiseases")
  diseasesTreated   Condition[] @relation("DiseasesTreated")
}

model Patient {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique
  doctors Doctor[] @relation(references: [id])
}

model Disease {
  id         String      @id @default(uuid())
  name       String
  symptoms   Symptom[]   @relation(references: [id])
  allergies  String[]
  conditions Condition[] @relation(references: [id])
}

model Symptom {
  id         String    @id @default(uuid())
  name       String
  qualities  String[]
  ocurrences String[]
  severity   String
  diseases   Disease[] @relation(references: [id])
}

model Condition {
  id          String    @id @default(uuid())
  startTime   DateTime
  endTime     DateTime
  description String
  diagnoseBy  Doctor?   @relation("DiagnosedDiseases", fields: [doctorId], references: [id])
  doctorId    String?
  teatredBy   Doctor?   @relation("DiseasesTreated", fields: [teatredById], references: [id])
  teatredById String?
  diseases    Disease[] @relation(references: [id])
}
